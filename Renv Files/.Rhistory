group_by(AgeGroup) %>%
summarize(
Total_Population = n(),
Total_Unemployed = sum(Unemployed, na.rm = TRUE)
) %>%
mutate(
Unemployment_Rate = (Total_Unemployed / Total_Population) * 100
)
print("Unemployment by Age Group:")
print(age_unemployment)
ggplot(data = age_unemployment, aes(x = AgeGroup, y = Unemployment_Rate)) +
geom_bar(stat = "identity", fill = "lightblue") +
theme_minimal() +
labs(
title = "Unemployment Rate by Age Group",
x = "Age Group",
y = "Unemployment Rate (%)"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
df <- cleaned_data
df$Unemployed <- ifelse(df$EMPSTAT == 2, 1, 0)
# Create Age Groups
df$AgeGroup <- cut(
df$AGE,
breaks = seq(0, 100, by = 10),
right = FALSE,
labels = paste(seq(0, 90, by = 10), seq(9, 99, by = 10), sep = "-")
)
# Map RACE Codes to Descriptive Labels
race_codes <- c(
`1` = 'White',
`2` = 'Black',
`3` = 'American Indian or Alaska Native',
`4` = 'Chinese',
`5` = 'Japanese',
`6` = 'Other Asian or Pacific Islander',
`7` = 'Other Race',
`8` = 'Two or More Races'
)
df$Race <- race_codes[as.character(df$RACE)]
# Calculate Unemployment Rate by Race and Age Group
race_age_unemployment <- df %>%
filter(!is.na(AgeGroup) & !is.na(Race)) %>%
group_by(Race, AgeGroup) %>%
summarize(
Total_Population = n(),
Total_Unemployed = sum(Unemployed, na.rm = TRUE)
) %>%
mutate(
Unemployment_Rate = (Total_Unemployed / Total_Population) * 100
)
# Ensure Age Groups are Ordered Correctly
race_age_unemployment$AgeGroup <- factor(
race_age_unemployment$AgeGroup,
levels = unique(df$AgeGroup)
)
# Visualize the Relationship - Heatmap
ggplot(data = race_age_unemployment, aes(x = AgeGroup, y = Race, fill = Unemployment_Rate)) +
geom_tile(color = "white") +
scale_fill_gradient(
low = "lightblue",
high = "red",
na.value = "grey80",
name = "Unemployment Rate (%)"
) +
theme_minimal() +
labs(
title = "Unemployment Rate by Race and Age Group",
x = "Age Group",
y = "Race"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
df$Unemployed <- ifelse(df$EMPSTAT == 2, 1, 0)
sex_codes <- c('1' = 'Male', '2' = 'Female')
df$Sex <- sex_codes[as.character(df$SEX)]
race_codes <- c(
'1' = 'White',
'2' = 'Black',
'3' = 'American Indian or Alaska Native',
'4' = 'Asian',
'5' = 'Asian',
'6' = 'Asian',
'7' = 'Other Race',
'8' = 'Two or More Races'
)
df$Race <- race_codes[as.character(df$RACE)]
df$AgeGroup <- cut(
df$AGE,
breaks = seq(0, 100, by = 10),
right = FALSE,
labels = paste0(seq(0, 90, by = 10), "-", seq(9, 99, by = 10))
)
df$AGE <- as.numeric(df$AGE)
age_sex_unemployment <- df %>%
filter(!is.na(AgeGroup) & !is.na(Sex)) %>%
group_by(AgeGroup, Sex) %>%
summarize(
Total_Population = n(),
Total_Unemployed = sum(Unemployed, na.rm = TRUE)
) %>%
mutate(
Unemployment_Rate = (Total_Unemployed / Total_Population) * 100
)
ggplot(age_sex_unemployment, aes(x = AgeGroup, y = Unemployment_Rate, color = Sex, group = Sex)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_minimal() +
labs(
title = "Unemployment Rate Across Age Groups by Sex",
x = "Age Group",
y = "Unemployment Rate (%)",
color = "Sex"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cleaned1_data <- cleaned_data %>%
mutate(RACE = as.character(RACE))
# Merge race labels into cleaned_data using your existing race_table
cleaned1_data <- cleaned1_data %>%
left_join(race_table, by = c("RACE" = "Value")) %>%
rename(Race = Label)
# Prepare data for the heatmap
race_gender_data <- cleaned1_data %>%
mutate(
SEX = factor(SEX, levels = c(1, 2), labels = c("Male", "Female")),
EMPSTAT = factor(EMPSTAT, levels = c(1, 2), labels = c("Employed", "Unemployed"))
) %>%
filter(SEX %in% c("Male", "Female"))  # Include only Male and Female genders
# Summarize unemployment by race and gender
race_gender_unemployment <- race_gender_data %>%
group_by(Race, SEX, EMPSTAT) %>%
summarise(count = n(), .groups = 'drop') %>%
pivot_wider(names_from = EMPSTAT, values_from = count, values_fill = 0) %>%
rename(
employed = Employed,
unemployed = Unemployed,
Gender = SEX
) %>%
mutate(
total = employed + unemployed,
unemployment_rate = unemployed / total
)
# Prepare data for plotting
race_gender_unemployment_plot <- race_gender_unemployment %>%
select(Race, Gender, unemployment_rate)
# Plot the unemployment rate by race and gender using a heatmap
ggplot(data = race_gender_unemployment_plot, aes(x = Gender, y = Race, fill = unemployment_rate)) +
geom_tile(color = "white") +
scale_fill_gradient(
low = "lightblue",
high = "red",
name = "Unemployment Rate"
) +
theme_minimal() +
labs(
title = "Unemployment Rate by Race and Gender",
x = "Gender",
y = "Race"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Load required libraries
library(tidyverse)
library(maps)
library(ggplot2)
library(viridis)  # For Viridis color scales
# Sample Data: Ensure your cleaned_data includes `STATEICP` and `EDUC` variables
# Replace this with your actual data source
# Assuming 'cleaned_data' is already loaded in your environment
# Add State Names to Data
state_mapping <- data.frame(
STATEICP = c(1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 21, 22, 23, 24, 25,
31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46,
47, 48, 49, 51, 52, 53, 54, 56, 61, 62, 63, 64, 65, 66,
67, 68, 71, 72, 73, 81, 82, 83),
State = c("Connecticut", "Maine", "Massachusetts", "New Hampshire", "Rhode Island", "Vermont",
"Delaware", "New Jersey", "New York", "Pennsylvania", "Illinois", "Indiana", "Michigan",
"Ohio", "Wisconsin", "Iowa", "Kansas", "Minnesota", "Missouri", "Nebraska",
"North Dakota", "South Dakota", "Virginia", "Alabama", "Arkansas", "Florida",
"Georgia", "Louisiana", "Mississippi", "North Carolina", "South Carolina", "Texas",
"Kentucky", "Maryland", "Oklahoma", "Tennessee", "West Virginia", "Arizona", "Colorado",
"Idaho", "Montana", "Nevada", "New Mexico", "Utah", "Wyoming", "California",
"Oregon", "Washington", "Alaska", "Hawaii", "Puerto Rico")
)
# Merge state names into the data
cleaned_data <- cleaned_data %>%
left_join(state_mapping, by = "STATEICP")
# Summarize Education Level by State
state_education <- cleaned_data %>%
group_by(State.x) %>%
summarise(Average_Education_Level = mean(EDUC, na.rm = TRUE))
# Add Swing, Democratic, and Republican State Groups
swing_states <- c("Arizona", "Florida", "Georgia", "Iowa", "Michigan", "Minnesota",
"Nevada", "New Hampshire", "North Carolina", "Ohio", "Pennsylvania",
"Texas", "Wisconsin")
democratic_states <- c("Washington", "Oregon", "California", "Colorado", "New Mexico",
"Illinois", "Virginia", "Nebraska", "Vermont", "Connecticut",
"Rhode Island", "New Jersey", "New York", "Maryland", "Delaware",
"Hawaii", "Massachusetts", "Maine")
republican_states <- c("Indiana", "Kansas", "Missouri", "North Dakota", "South Dakota",
"Alabama", "Arkansas", "Louisiana", "Mississippi", "South Carolina",
"Kentucky", "Oklahoma", "Tennessee", "West Virginia", "Idaho",
"Montana", "Utah", "Wyoming", "Alaska")
state_education <- state_education %>%
mutate(
State_Group = case_when(
State.x %in% swing_states ~ "Swing",
State.x %in% democratic_states ~ "Democratic",
State.x %in% republican_states ~ "Republican",
TRUE ~ "Other"
)
)
# Prepare Map Data Using `maps`
us_map <- map_data("state")
# Convert state names to lowercase to match 'region' in 'us_map'
state_education1 <-state_education
state_education <- state_education %>%
mutate(State = tolower(State.x))
# Merge the map data with state education data
map_data <- us_map %>%
left_join(state_education, by = c("region" = "State"))
# Define swing states in lowercase for mapping
swing_states_lower <- tolower(swing_states)
# Add Swing indicator to map_data
map_data <- map_data %>%
mutate(
Swing = region %in% swing_states_lower
)
# Adjust the size settings to match your provided code
# Plot 1: All States with Viridis Color Scale and Swing States Highlighted
# Define the aspect ratio
aspect_ratio <- 1.3
# Plotting the Map
ggplot(map_data, aes(x = long, y = lat, group = group, fill = Average_Education_Level)) +
geom_polygon(
color = "black",
size = 0.2  # Default border size
) +
coord_fixed(aspect_ratio) +
scale_fill_viridis_c(
option = "viridis",
na.value = "grey80",
name = "Average Education Level"
) +
theme_void() +
labs(
title = "Average Education Level by State",
caption = "Data Source: IPUMS USA"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
legend.position = "bottom"
)
# Plot 2: Swing States Colored by Education Level, Others in Grey
# Create a new column for fill color
map_data <- map_data %>%
mutate(
Fill_Color = case_when(
Swing ~ as.character(Average_Education_Level),
TRUE ~ NA_character_  # Non-swing states will have NA for Average_Education_Level
)
)
# Plotting the Map
ggplot() +
# Plot non-swing states in grey
geom_polygon(
data = filter(map_data, !Swing),
aes(x = long, y = lat, group = group),
fill = "grey80",
color = "black",
size = 0.2
) +
# Plot swing states with their education levels
geom_polygon(
data = filter(map_data, Swing),
aes(x = long, y = lat, group = group, fill = Average_Education_Level),
color = "black",
size = 0.2
) +
coord_fixed(aspect_ratio) +
scale_fill_viridis_c(
option = "heat",
na.value = "grey80",
name = "Average Education Level"
) +
theme_void() +
labs(
title = "Average Education Level in Swing States",
subtitle = "Non-swing states filled with grey",
caption = "Data Source: IPUMS USA"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "bottom"  # Move the legend below the plot
)
# Load required libraries
library(tidyverse)
library(maps)
library(ggplot2)
library(viridis)  # For Viridis color scales
# Sample Data: Ensure your cleaned_data includes `STATEICP` and `EDUC` variables
# Replace this with your actual data source
# Assuming 'cleaned_data' is already loaded in your environment
# Add State Names to Data
state_mapping <- data.frame(
STATEICP = c(1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35,
36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 61, 62,
63, 64, 65, 66, 67, 68, 71, 72, 73, 81, 82, 83, 96),
State = c("Connecticut", "Maine", "Massachusetts", "New Hampshire", "Rhode Island", "Vermont",
"Delaware", "New Jersey", "New York", "Pennsylvania", "Illinois", "Indiana", "Michigan",
"Ohio", "Wisconsin", "Iowa", "Kansas", "Minnesota", "Missouri", "Nebraska",
"North Dakota", "South Dakota", "Virginia", "Alabama", "Arkansas", "Florida",
"Georgia", "Louisiana", "Mississippi", "North Carolina", "South Carolina", "Texas",
"Kentucky", "Maryland", "Oklahoma", "Tennessee", "West Virginia", "Arizona", "Colorado",
"Idaho", "Montana", "Nevada", "New Mexico", "Utah", "Wyoming", "California",
"Oregon", "Washington", "Alaska", "Hawaii", "Puerto Rico", "State Groupings")
)
# Merge state names into the data
cleaned_data <- cleaned_data %>%
left_join(state_mapping, by = "STATEICP")
# Summarize Education Level by State
state_education <- cleaned_data %>%
group_by(State) %>%
summarise(Average_Education_Level = mean(EDUC, na.rm = TRUE))
# Add Swing, Democratic, and Republican State Groups
swing_states <- c("Arizona", "Florida", "Georgia", "Iowa", "Michigan", "Minnesota",
"Nevada", "New Hampshire", "North Carolina", "Ohio", "Pennsylvania",
"Texas", "Wisconsin")
democratic_states <- c("Washington", "Oregon", "California", "Colorado", "New Mexico",
"Illinois", "Virginia", "Nebraska", "Vermont", "Connecticut",
"Rhode Island", "New Jersey", "New York", "Maryland", "Delaware",
"Hawaii", "Massachusetts", "Maine")
republican_states <- c("Indiana", "Kansas", "Missouri", "North Dakota", "South Dakota",
"Alabama", "Arkansas", "Louisiana", "Mississippi", "South Carolina",
"Kentucky", "Oklahoma", "Tennessee", "West Virginia", "Idaho",
"Montana", "Utah", "Wyoming", "Alaska")
state_education <- state_education %>%
mutate(
State_Group = case_when(
State %in% swing_states ~ "Swing",
State %in% democratic_states ~ "Democratic",
State %in% republican_states ~ "Republican",
TRUE ~ "Other"
)
)
# Prepare Map Data Using `maps`
us_map <- map_data("state")
# Convert state names to lowercase to match 'region' in 'us_map'
state_education1 <- state_education
state_education <- state_education %>%
mutate(State = tolower(State))
# Merge the map data with state education data
map_data <- us_map %>%
left_join(state_education, by = c("region" = "State"))
# Set the size of the plots
plot_width <- 10  # inches
plot_height <- 6  # inches
# Plot 1: All States with Viridis Color Scale
plot_all_states <- ggplot(map_data, aes(x = long, y = lat, group = group, fill = Average_Education_Level)) +
geom_polygon(color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "viridis",
na.value = "grey80",
name = "Average Education Level"
) +
theme_void() +
labs(
title = "Average Education Level by State",
caption = "Data Source: IPUMS USA"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16)
)
# Display the plot
print(plot_all_states)
# Save the plot with specified dimensions
ggsave("average_education_all_states.png", plot = plot_all_states, width = plot_width, height = plot_height, dpi = 300)
# Plot 2: Only Swing States
swing_map_data <- map_data %>%
filter(State_Group == "Swing")
plot_swing_states <- ggplot(swing_map_data, aes(x = long, y = lat, group = group, fill = Average_Education_Level)) +
geom_polygon(color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "viridis",
na.value = "grey80",
name = "Average Education Level"
) +
coord_fixed(1.3) +
theme_void() +
labs(
title = "Average Education Level in Swing States",
caption = "Data Source: IPUMS USA"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16)
)
# Display the plot
print(plot_swing_states)
# Save the plot with specified dimensions
ggsave("average_education_swing_states.png", plot = plot_swing_states, width = plot_width, height = plot_height, dpi = 300)
# Plotting the Map
ggplot(map_data, aes(x = long, y = lat, group = group, fill = Average_Education_Level)) +
geom_polygon(color = "black", size = 0.2) +
# Highlight swing states with a thick border
geom_polygon(
data = filter(map_data, State_Group == "Swing"),
aes(x = long, y = lat, group = group),
fill = NA, color = "yellow", size = 0.7
) +
scale_fill_gradientn(
colors = c("blue", "grey", "red"),
na.value = "grey80",
name = "Avg. Education Level"
) +
theme_void() +
labs(
title = "Average Education Level by State",
subtitle = "Swing states highlighted",
caption = "Data Source: State Education Data"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5)
)
# Filter data for swing states
swing_map_data <- filter(state_education, State_Group == "Swing")
# Recode the educational levels into understandable categories
cleaned_data <- cleaned_data %>%
mutate(EDUC = case_when(
EDUC == 0 ~ "No schooling",
EDUC %in% 1:3 ~ "Primary school",
EDUC %in% 4:6 ~ "High school",
EDUC %in% 7:9 ~ "Some college",
EDUC %in% 10:11 ~ "Bachelor's degree",
EDUC == 12 ~ "Master's or above"
))
# Group the data by educational level and employment status
employment_education <- cleaned_data %>%
group_by(EDUC, EMPSTAT) %>%
summarise(count = n()) %>%
spread(EMPSTAT, count, fill = 0) %>%
rename(employed = `1`, unemployed = `2`) %>%
mutate(total = employed + unemployed,
unemployment_rate = unemployed / total)
# Fit a linear model to predict unemployment rate by educational level
employment_education$EDUC_numeric <- as.numeric(factor(employment_education$EDUC,
levels = c("No schooling", "Primary school",
"High school", "Some college",
"Bachelor's degree", "Master's or above")))
model <- lm(unemployment_rate ~ EDUC_numeric, data = employment_education)
# Predict unemployment rate
employment_education$predicted_unemployment <- predict(model)
# Plot the real data and the expected trend line
ggplot(employment_education, aes(x = EDUC_numeric, y = unemployment_rate)) +
geom_point(aes(color = EDUC), size = 3) +  # Real data points
geom_line(aes(x = EDUC_numeric, y = predicted_unemployment), color = "blue", size = 1) +  # Expected trend line
scale_x_continuous(breaks = 1:6, labels = c("No schooling", "Primary school",
"High school", "Some college",
"Bachelor's degree", "Master's or above")) +
labs(title = "Unemployment Rate by Education Level",
x = "Education Level",
y = "Unemployment Rate",
color = "Education Level") +
theme_minimal()
# Install required packages
required_packages <- c("ggplot2", "viridis", "mapproj", "maps", "dplyr")
new_packages <- required_packages[!(required_packages %in% installed.packages()[, "Package"])]
if (length(new_packages) > 0) install.packages(new_packages)
# Load required libraries
library(ggplot2)
library(viridis)
library(mapproj)
library(maps)
library(dplyr)
# Load the unemployment data from the viridis package
data(unemp, package = "viridis")
# Get county map data with Albers projection
county_df <- map_data("county", projection = "albers", parameters = c(39, 45))
names(county_df) <- c("long", "lat", "group", "order", "state_name", "county")
# Add state abbreviations to county data
county_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]
county_df$state_name <- NULL
# Get state map data with Albers projection
state_df <- map_data("state", projection = "albers", parameters = c(39, 45))
# Merge unemployment data with county map data
choropleth <- merge(county_df, unemp, by = c("state", "county"))
choropleth <- choropleth[order(choropleth$order), ]
# Create the choropleth map
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), linewidth = 0.2) +
geom_polygon(data = state_df, colour = "white", fill = NA) +
coord_fixed() +
theme_minimal() +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16)
) +
scale_fill_viridis(option = "magma", name = "Unemployment Rate")
cd
source("setup_renv.R")
source("setup_renv.R")
getwd()
setwd("/Users/xipuwang/project_302/renv")
source("setup_renv.R")
